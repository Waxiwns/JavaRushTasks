Игра Racer (1/28)
Предлагаем тебе написать увлекательную игру Racer. Начнем с правил.

Цель игры — достигнуть финиша, управляя гоночной машиной на оживленной трассе.
Количество очков зависит от длительности гонки: чем раньше игрок финиширует, тем больше очков он получит.
Игра окончена, когда игрок сталкивается с другой машиной или препятствием.
Создадим главный класс игры RacerGame. Чтобы использовать функциональность игрового движка, унаследуем его от класса Game, который содержит в себе методы для реализации игры.

Для начала нам нужно игровое поле (64х64), на которое будут добавляться игровые объекты. Так как значения высоты и ширины поля будут часто использоваться при реализации логики игры, есть смысл создать константы WIDTH и HEIGHT.

Перед запуском игры выполняется метод initialize(), задачей которого является установка начального состояния игры. Его нужно переопределить в классе RacerGame.

В методе initialize() необходимо:

задать размер игрового поля, вызвав setScreenSize(WIDTH, HEIGHT);
убрать отображение сетки, вызвав showGrid(false).
Чтобы успешно справиться с задачей Racer, рекомендуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.


Требования:
1. Должен существовать публичный класс RacerGame.
2. Класс RacerGame должен быть наследником класса Game.
3. В классе RacerGame должно существовать публичное статическое final int поле WIDTH, проинициализированное при объявлении значением 64.
4. В классе RacerGame должно существовать публичное статическое final int поле HEIGHT, проинициализированное при объявлении значением 64.
5. В классе RacerGame должен быть переопределен метод initialize() родительского класса Game.
6. В методе initialize() должен быть вызван метод showGrid(boolean) класса Game c параметром false.
7. В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами WIDTH и HEIGHT.
8. В классе RacerGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Racer (2/28)
Теперь подготовим игровое поле.
В этой части создадим переменные и методы, с помощью которых в будущем отрисуем дорогу и дорожную разметку. По центру дороги будет расположена разделительная полоса.
Значение ее координаты по оси x равно половине ширины игрового поля и хранится в переменной CENTER_X.
По бокам будет расположена обочина. Ее ширина равна 14 и хранится в переменной ROADSIDE_WIDTH.

Создадим вспомогательные методы:

createGame() - для старта новой игры;
drawScene() - для отрисовки всех игровых объектов;
drawField() - для отрисовки фона игрового поля.


Требования:
1. В классе RacerGame должно существовать публичное статическое final int поле CENTER_X, проинициализированное при объявлении значением WIDTH / 2.
2. В классе RacerGame должно существовать публичное статическое final int поле ROADSIDE_WIDTH, проинициализированное при объявлении значением 14.
3. В классе RacerGame должен существовать приватный метод void createGame().
4. В классе RacerGame должен существовать приватный метод void drawScene().
5. В методе createGame() должен быть вызван метод drawScene().
6. В методе initialize() должен быть вызван метод createGame().
7. В методе initialize() вызов метода createGame() должен быть после вызова метода setScreenSize(int, int).
8. В классе RacerGame должен существовать приватный метод void drawField().
9. В методе drawScene() должен быть вызван метод drawField().



Игра Racer (3/28)
Приступим к отрисовке трассы в методе drawField().
Для установки цвета определенной ячейке используется метод setCellColor(int, int, Color). В качестве аргументов передаются координаты x, y и цвет.

Раскраска всего игрового поля делается в цикле.

В результате должна получится примерно такая трасса:



P.S.: Цвета можешь выбрать на свое усмотрение.


Требования:
1. В методе drawField() для ячеек игрового поля, у которых x равен CENTER_X, необходимо вызвать метод setCellColor(int, int, Color) с параметрами: CENTER_X, y, и любой цвет (например, Color.WHITE).
2. В методе drawField() для остальных ячеек игрового поля, у которых x больше либо равно ROADSIDE_WIDTH и x меньше (WIDTH - ROADSIDE_WIDTH), необходимо вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y, и любой цвет (например, Color.DIMGREY).
3. В методе drawField() для всех остальных ячеек игрового поля, необходимо вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y, и цвет, и любой цвет (например, Color.GREEN).
4. После вызова метода initialize() поле должно быть раскрашено в 3 разных цвета согласно условию.



Игра Racer (4/28)
В процессе игры появятся много объектов, которые будут двигаться по игровому полю и иногда его покидать. В случае вызова метода setCellColor(int, int, Color) с координатами, лежащими за пределами игрового поля, будет выбрасываться исключение.
Чтобы этого не произошло, переопредели его таким образом, чтобы вызов родительского метода происходил только с координатами, лежащими на игровом поле.

Подсказка: для вызова родительского метода используй ключевое слово super.


Требования:
1. В классе RacerGame должен быть переопределен метод setCellColor(int, int, Color) родительского класса Game.
2. В методе setCellColor(int, int, Color), если параметр метода x находится за пределами поля, метод не должен ничего делать.
3. В методе setCellColor(int, int, Color), если параметр метода y находится за пределами поля, метод не должен ничего делать.
4. В методе setCellColor(int, int, Color) должен вызываться метод базового класса, используя ключевое слово super.