Игра Moon Lander (1/23)

Сегодня мы предлагаем тебе написать увлекательную игру — Moon Lander. Как всегда, начнем с правил.

Цель – опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны, используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.

Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки — «платформа». Если игрок успешно совершает посадку, он выигрывает.

Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге.

Игра окончена, когда игрок разбивается о поверхность Луны.
Итак, начнем с главного класса игры MoonLanderGame.

Унаследуем его от класса Game.

Этот и другие классы "игрового движка" находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс MoonLanderGame должен содержать такой импорт:
import com.javarush.engine.cell.*;

Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).

Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.

Чтобы успешно справиться с задачей Moon Lander, рекомендуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.


Требования:
1. Должен существовать публичный класс MoonLanderGame.
2. Класс MoonLanderGame должен быть наследником класса Game.
3. В классе MoonLanderGame должно существовать публичное статическое final int поле WIDTH, при объявлении проинициализированное значением 64.
4. В классе MoonLanderGame должно существовать публичное статическое final int поле HEIGHT, при объявлении проинициализированное значением 64.
5. В классе MoonLanderGame должен быть переопределен метод initialize() родительского класса Game.
6. В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами WIDTH и HEIGHT.
7. В классе MoonLanderGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (2/23)
На данном этапе давай создадим метод drawScene(), который будет отвечать за отрисовку игрового поля.
Сперва в этом методе мы будем окрашивать все ячейки игрового поля в один цвет.
Также нам понадобится метод createGame(), отвечающий за создание игры.
Для начала мы будем вызывать в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).


Требования:
1. В классе MoonLanderGame должен существовать приватный метод void createGame().
2. В классе MoonLanderGame должен существовать приватный метод void drawScene().
3. В методе createGame() должен быть вызван метод drawScene().
4. В методе initialize() должен быть вызван метод createGame().
5. В методе initialize() вызов метода createGame() происходит после вызова метода setScreenSize(int, int).
6. В методе drawScene() для каждой ячейки отображения необходимо вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y и любой цвет (например, Color.BLACK).



Игра Moon Lander (3/23)
Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем их общие характеристики. На данном этапе это координаты x и y.


Требования:
1. Должен существовать публичный класс GameObject.
2. В классе GameObject должно существовать публичное поле x типа double.
3. В классе GameObject должно существовать публичное поле y типа double.
4. В классе GameObject должен существовать один публичный конструктор с двумя параметрами типа double, который устанавливает соответствующие значения полям x и y.



Игра Moon Lander (4/23)
Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета — это игровой объект.

Обрати внимание, что у нас появился вспомогательный класс ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.


Требования:
1. В классе GameObject должно существовать публичное поле matrix типа int[][].
2. В классе GameObject конструктор, который принимает 2 параметра типа double, должен быть удален.
3. В классе GameObject должен появиться публичный конструктор с тремя параметрами: double, double, int[][], который устанавливает соответствующие значения полям x, y и полю matrix.
4. В классе GameObject должен существовать только один конструктор.
5. Должен существовать публичный класс Rocket.
6. Класс Rocket должен быть наследником класса GameObject.
7. В классе Rocket должен существовать один публичный конструктор с двумя параметрами типа double (x и y), который вызывает конструктор базового класса с параметрами x, y и ShapeMatrix.ROCKET, используя ключевое слово "super".


Игра Moon Lander (5/23)
Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране, вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject — это координаты левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы (см. подсказку ниже).
В конце данной подзадачи мы отрисуем ракету, используя созданный метод.

Подсказка:
В классе ShapeMatrix числа обозначают порядковый номер цвета из enum Color(игрового движка).
Чтоб получить цвет, нужно использовать Color.values()[matrix[y][x]].


Требования:
1. В классе GameObject должно существовать публичное поле width типа int.
2. В классе GameObject должно существовать публичное поле height типа int.
3. В конструкторе класса GameObject поле width должно инициализироваться значением matrix[0].length, где matrix — последний параметр конструктора.
4. В конструкторе класса GameObject поле height должно инициализироваться значением matrix.length, где matrix — последний параметр конструктора.
5. В классе GameObject должен существовать публичный метод void draw(Game).
6. Метод draw(Game) не должен ничего делать, если поле класса matrix == null.
7. В методе draw(Game game) для каждой ячейки матрицы matrix у объекта game должен быть вызван метод setCellColor(int, int, Color). В качестве параметров необходимо передать: x класса + x в матрице, y класса + y в матрице, цвет из матрицы.
8. В классе MoonLanderGame должно существовать приватное поле rocket типа Rocket.
9. Поле rocket должно быть проинициализировано в методе createGame() новым объектом типа Rocket до вызова метода drawScene().
10. Конструктор класса Rocket должен быть вызван с параметрами (WIDTH / 2) и 0.
11. В методе drawScene() после отрисовки поля, у ракеты должен быть вызван метод draw(Game). В качестве параметра передай в метод "this".
12. В классе GameObject должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (6/23)
Ракета у нас уже есть, теперь займемся отрисовкой ландшафта. Его матрицу мы сделали для тебя: ты ее найдешь в классе ShapeMatrix. Ландшафт — это тоже игровой объект, поэтому создадим метод, который будет отвечать за инициализацию подобных объектов. В нем будут создаваться ландшафт и ракета.
Как ты заметил, на экране есть сетка. С одной стороны, она помогает эффективнее работать с игровым полем, а с другой — мешает игровому процессу, поэтому на данном этапе мы ее скроем. В дальнейшем ты сможешь ее включать, если тебе это понадобится при разработке.


Требования:
1. В классе MoonLanderGame должно существовать приватное поле landscape типа GameObject.
2. В классе MoonLanderGame должен существовать приватный метод void createGameObjects().
3. Поле rocket должно быть проинициализировано в методе createGameObjects().
4. Поле rocket не должно быть проинициализировано в методе createGame().
5. Поле landscape должно быть проинициализировано в методе createGameObjects() новым объектом типа GameObject с параметрами: 0, 25, ShapeMatrix.LANDSCAPE.
6. В методе createGame() метод createGameObjects() должен быть вызван до метода drawScene().
7. В методе drawScene() после отрисовки поля у ландшафта должен быть вызван метод draw(Game). В качестве параметра передай в метод "this".
8. В методе initialize() должен быть вызван метод showGrid(boolean) класса Game c параметром false.



Игра Moon Lander (8/23)
Продолжим реализовывать движение ракеты. Давай добавим поля, которые будут ответственны за состояние клавиш, благодаря которым мы перемещаем ракету по экрану. Эти поля будут принимать только два значения: true, если клавиша нажата, иначе false.
Для управления ракетой нам понадобится всего три клавиши: вверх, влево и вправо. За нажатие клавиши вверх будет отвечать поле isUpPressed, влево — isLeftPressed, вправо — isRightPressed. В начале игры эти поля должны быть в состоянии false, так как ни одна клавиша еще не нажата.
Реализацией движения мы займемся в следующих частях.


Требования:
1. В классе MoonLanderGame должно существовать приватное поле isUpPressed типа boolean.
2. В классе MoonLanderGame должно существовать приватное поле isLeftPressed типа boolean.
3. В классе MoonLanderGame должно существовать приватное поле isRightPressed типа boolean.
4. Поле isUpPressed должно быть инициализировано в методе createGame() значением false.
5. Поле isLeftPressed должно быть инициализировано в методе createGame() значением false.
6. Поле isRightPressed должно быть инициализировано в методе createGame() значением false.



Игра Moon Lander (9/23)
На этом этапе займемся реализацией методов onKeyPress и onKeyReleased. Как ты мог понять из названия, метод onKeyPress вызывается при нажатии любой клавиши, а метод onKeyReleased при отпускании. Перейдем к реализации метода onKeyPress. Он должен обрабатывать нажатия клавиш вверх, влево и вправо и выставлять флагам (полям) соответствующие значения. Учти, что при нажатии клавиши влево нужно установить значение false флагу isRightPressed, и наоборот. Кроме того, не забудь сбрасывать соответствующие флаги при отпускании клавиш в методе onKeyReleased.


Требования:
1. В классе MoonLanderGame должен быть переопределен метод onKeyPress(Key) родительского класса Game.
2. Метод onKeyPress(Key) должен устанавливать полю isUpPressed значение true, если параметр метода равен Key.UP.
3. Если параметр метода onKeyPress(Key) равен Key.LEFT, метод должен устанавливать полю isLeftPressed значение true, а полю isRightPressed значение false.
4. Если параметр метода onKeyPress(Key) равен Key.RIGHT, метод должен устанавливать полю isRightPressed значение true, а полю isLeftPressed значение false.
5. В классе MoonLanderGame должен быть переопределен метод onKeyReleased(Key) родительского класса Game.
6. Метод onKeyReleased(Key) должен устанавливать полю isUpPressed значение false, если параметр метода равен Key.UP.
7. Метод onKeyReleased(Key) должен устанавливать полю isLeftPressed значение false, если параметр метода равен Key.LEFT.
8. Метод onKeyReleased(Key) должен устанавливать полю isRightPressed значение false, если параметр метода равен Key.RIGHT.


