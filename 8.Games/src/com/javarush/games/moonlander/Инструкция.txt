Игра Moon Lander (1/23)

Сегодня мы предлагаем тебе написать увлекательную игру — Moon Lander. Как всегда, начнем с правил.

Цель – опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны, используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.

Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки — «платформа». Если игрок успешно совершает посадку, он выигрывает.

Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге.

Игра окончена, когда игрок разбивается о поверхность Луны.
Итак, начнем с главного класса игры MoonLanderGame.

Унаследуем его от класса Game.

Этот и другие классы "игрового движка" находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс MoonLanderGame должен содержать такой импорт:
import com.javarush.engine.cell.*;

Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).

Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.

Чтобы успешно справиться с задачей Moon Lander, рекомендуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.


Требования:
1. Должен существовать публичный класс MoonLanderGame.
2. Класс MoonLanderGame должен быть наследником класса Game.
3. В классе MoonLanderGame должно существовать публичное статическое final int поле WIDTH, при объявлении проинициализированное значением 64.
4. В классе MoonLanderGame должно существовать публичное статическое final int поле HEIGHT, при объявлении проинициализированное значением 64.
5. В классе MoonLanderGame должен быть переопределен метод initialize() родительского класса Game.
6. В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами WIDTH и HEIGHT.
7. В классе MoonLanderGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (2/23)
На данном этапе давай создадим метод drawScene(), который будет отвечать за отрисовку игрового поля.
Сперва в этом методе мы будем окрашивать все ячейки игрового поля в один цвет.
Также нам понадобится метод createGame(), отвечающий за создание игры.
Для начала мы будем вызывать в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).


Требования:
1. В классе MoonLanderGame должен существовать приватный метод void createGame().
2. В классе MoonLanderGame должен существовать приватный метод void drawScene().
3. В методе createGame() должен быть вызван метод drawScene().
4. В методе initialize() должен быть вызван метод createGame().
5. В методе initialize() вызов метода createGame() происходит после вызова метода setScreenSize(int, int).
6. В методе drawScene() для каждой ячейки отображения необходимо вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y и любой цвет (например, Color.BLACK).



Игра Moon Lander (3/23)
Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем их общие характеристики. На данном этапе это координаты x и y.


Требования:
1. Должен существовать публичный класс GameObject.
2. В классе GameObject должно существовать публичное поле x типа double.
3. В классе GameObject должно существовать публичное поле y типа double.
4. В классе GameObject должен существовать один публичный конструктор с двумя параметрами типа double, который устанавливает соответствующие значения полям x и y.



Игра Moon Lander (4/23)
Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета — это игровой объект.

Обрати внимание, что у нас появился вспомогательный класс ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.


Требования:
1. В классе GameObject должно существовать публичное поле matrix типа int[][].
2. В классе GameObject конструктор, который принимает 2 параметра типа double, должен быть удален.
3. В классе GameObject должен появиться публичный конструктор с тремя параметрами: double, double, int[][], который устанавливает соответствующие значения полям x, y и полю matrix.
4. В классе GameObject должен существовать только один конструктор.
5. Должен существовать публичный класс Rocket.
6. Класс Rocket должен быть наследником класса GameObject.
7. В классе Rocket должен существовать один публичный конструктор с двумя параметрами типа double (x и y), который вызывает конструктор базового класса с параметрами x, y и ShapeMatrix.ROCKET, используя ключевое слово "super".


