Игра Moon Lander (1/23)

Сегодня мы предлагаем тебе написать увлекательную игру — Moon Lander. Как всегда, начнем с правил.

Цель – опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны, используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.

Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки — «платформа». Если игрок успешно совершает посадку, он выигрывает.

Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге.

Игра окончена, когда игрок разбивается о поверхность Луны.
Итак, начнем с главного класса игры MoonLanderGame.

Унаследуем его от класса Game.

Этот и другие классы "игрового движка" находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс MoonLanderGame должен содержать такой импорт:
import com.javarush.engine.cell.*;

Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).

Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.

Чтобы успешно справиться с задачей Moon Lander, рекомендуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.


Требования:
1. Должен существовать публичный класс MoonLanderGame.
2. Класс MoonLanderGame должен быть наследником класса Game.
3. В классе MoonLanderGame должно существовать публичное статическое final int поле WIDTH, при объявлении проинициализированное значением 64.
4. В классе MoonLanderGame должно существовать публичное статическое final int поле HEIGHT, при объявлении проинициализированное значением 64.
5. В классе MoonLanderGame должен быть переопределен метод initialize() родительского класса Game.
6. В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами WIDTH и HEIGHT.
7. В классе MoonLanderGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (2/23)
На данном этапе давай создадим метод drawScene(), который будет отвечать за отрисовку игрового поля.
Сперва в этом методе мы будем окрашивать все ячейки игрового поля в один цвет.
Также нам понадобится метод createGame(), отвечающий за создание игры.
Для начала мы будем вызывать в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).


Требования:
1. В классе MoonLanderGame должен существовать приватный метод void createGame().
2. В классе MoonLanderGame должен существовать приватный метод void drawScene().
3. В методе createGame() должен быть вызван метод drawScene().
4. В методе initialize() должен быть вызван метод createGame().
5. В методе initialize() вызов метода createGame() происходит после вызова метода setScreenSize(int, int).
6. В методе drawScene() для каждой ячейки отображения необходимо вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y и любой цвет (например, Color.BLACK).



Игра Moon Lander (3/23)
Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем их общие характеристики. На данном этапе это координаты x и y.


Требования:
1. Должен существовать публичный класс GameObject.
2. В классе GameObject должно существовать публичное поле x типа double.
3. В классе GameObject должно существовать публичное поле y типа double.
4. В классе GameObject должен существовать один публичный конструктор с двумя параметрами типа double, который устанавливает соответствующие значения полям x и y.



Игра Moon Lander (4/23)
Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета — это игровой объект.

Обрати внимание, что у нас появился вспомогательный класс ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.


Требования:
1. В классе GameObject должно существовать публичное поле matrix типа int[][].
2. В классе GameObject конструктор, который принимает 2 параметра типа double, должен быть удален.
3. В классе GameObject должен появиться публичный конструктор с тремя параметрами: double, double, int[][], который устанавливает соответствующие значения полям x, y и полю matrix.
4. В классе GameObject должен существовать только один конструктор.
5. Должен существовать публичный класс Rocket.
6. Класс Rocket должен быть наследником класса GameObject.
7. В классе Rocket должен существовать один публичный конструктор с двумя параметрами типа double (x и y), который вызывает конструктор базового класса с параметрами x, y и ShapeMatrix.ROCKET, используя ключевое слово "super".


Игра Moon Lander (5/23)
Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране, вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject — это координаты левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы (см. подсказку ниже).
В конце данной подзадачи мы отрисуем ракету, используя созданный метод.

Подсказка:
В классе ShapeMatrix числа обозначают порядковый номер цвета из enum Color(игрового движка).
Чтоб получить цвет, нужно использовать Color.values()[matrix[y][x]].


Требования:
1. В классе GameObject должно существовать публичное поле width типа int.
2. В классе GameObject должно существовать публичное поле height типа int.
3. В конструкторе класса GameObject поле width должно инициализироваться значением matrix[0].length, где matrix — последний параметр конструктора.
4. В конструкторе класса GameObject поле height должно инициализироваться значением matrix.length, где matrix — последний параметр конструктора.
5. В классе GameObject должен существовать публичный метод void draw(Game).
6. Метод draw(Game) не должен ничего делать, если поле класса matrix == null.
7. В методе draw(Game game) для каждой ячейки матрицы matrix у объекта game должен быть вызван метод setCellColor(int, int, Color). В качестве параметров необходимо передать: x класса + x в матрице, y класса + y в матрице, цвет из матрицы.
8. В классе MoonLanderGame должно существовать приватное поле rocket типа Rocket.
9. Поле rocket должно быть проинициализировано в методе createGame() новым объектом типа Rocket до вызова метода drawScene().
10. Конструктор класса Rocket должен быть вызван с параметрами (WIDTH / 2) и 0.
11. В методе drawScene() после отрисовки поля, у ракеты должен быть вызван метод draw(Game). В качестве параметра передай в метод "this".
12. В классе GameObject должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (6/23)
Ракета у нас уже есть, теперь займемся отрисовкой ландшафта. Его матрицу мы сделали для тебя: ты ее найдешь в классе ShapeMatrix. Ландшафт — это тоже игровой объект, поэтому создадим метод, который будет отвечать за инициализацию подобных объектов. В нем будут создаваться ландшафт и ракета.
Как ты заметил, на экране есть сетка. С одной стороны, она помогает эффективнее работать с игровым полем, а с другой — мешает игровому процессу, поэтому на данном этапе мы ее скроем. В дальнейшем ты сможешь ее включать, если тебе это понадобится при разработке.


Требования:
1. В классе MoonLanderGame должно существовать приватное поле landscape типа GameObject.
2. В классе MoonLanderGame должен существовать приватный метод void createGameObjects().
3. Поле rocket должно быть проинициализировано в методе createGameObjects().
4. Поле rocket не должно быть проинициализировано в методе createGame().
5. Поле landscape должно быть проинициализировано в методе createGameObjects() новым объектом типа GameObject с параметрами: 0, 25, ShapeMatrix.LANDSCAPE.
6. В методе createGame() метод createGameObjects() должен быть вызван до метода drawScene().
7. В методе drawScene() после отрисовки поля у ландшафта должен быть вызван метод draw(Game). В качестве параметра передай в метод "this".
8. В методе initialize() должен быть вызван метод showGrid(boolean) класса Game c параметром false.



Игра Moon Lander (8/23)
Продолжим реализовывать движение ракеты. Давай добавим поля, которые будут ответственны за состояние клавиш, благодаря которым мы перемещаем ракету по экрану. Эти поля будут принимать только два значения: true, если клавиша нажата, иначе false.
Для управления ракетой нам понадобится всего три клавиши: вверх, влево и вправо. За нажатие клавиши вверх будет отвечать поле isUpPressed, влево — isLeftPressed, вправо — isRightPressed. В начале игры эти поля должны быть в состоянии false, так как ни одна клавиша еще не нажата.
Реализацией движения мы займемся в следующих частях.


Требования:
1. В классе MoonLanderGame должно существовать приватное поле isUpPressed типа boolean.
2. В классе MoonLanderGame должно существовать приватное поле isLeftPressed типа boolean.
3. В классе MoonLanderGame должно существовать приватное поле isRightPressed типа boolean.
4. Поле isUpPressed должно быть инициализировано в методе createGame() значением false.
5. Поле isLeftPressed должно быть инициализировано в методе createGame() значением false.
6. Поле isRightPressed должно быть инициализировано в методе createGame() значением false.



Игра Moon Lander (9/23)
На этом этапе займемся реализацией методов onKeyPress и onKeyReleased. Как ты мог понять из названия, метод onKeyPress вызывается при нажатии любой клавиши, а метод onKeyReleased при отпускании. Перейдем к реализации метода onKeyPress. Он должен обрабатывать нажатия клавиш вверх, влево и вправо и выставлять флагам (полям) соответствующие значения. Учти, что при нажатии клавиши влево нужно установить значение false флагу isRightPressed, и наоборот. Кроме того, не забудь сбрасывать соответствующие флаги при отпускании клавиш в методе onKeyReleased.


Требования:
1. В классе MoonLanderGame должен быть переопределен метод onKeyPress(Key) родительского класса Game.
2. Метод onKeyPress(Key) должен устанавливать полю isUpPressed значение true, если параметр метода равен Key.UP.
3. Если параметр метода onKeyPress(Key) равен Key.LEFT, метод должен устанавливать полю isLeftPressed значение true, а полю isRightPressed значение false.
4. Если параметр метода onKeyPress(Key) равен Key.RIGHT, метод должен устанавливать полю isRightPressed значение true, а полю isLeftPressed значение false.
5. В классе MoonLanderGame должен быть переопределен метод onKeyReleased(Key) родительского класса Game.
6. Метод onKeyReleased(Key) должен устанавливать полю isUpPressed значение false, если параметр метода равен Key.UP.
7. Метод onKeyReleased(Key) должен устанавливать полю isLeftPressed значение false, если параметр метода равен Key.LEFT.
8. Метод onKeyReleased(Key) должен устанавливать полю isRightPressed значение false, если параметр метода равен Key.RIGHT.



Игра Moon Lander (10/23)
Продолжим реализацию движения ракеты. Она должна двигаться и по вертикали, и по горизонтали.
Давай внесем соответствующие изменения в метод move: теперь он будет принимать в качестве параметров состояния нажатия клавиш. Первый параметр — это isUpPressed, второй — isLeftPressed, третий — isRightPressed.
Для установки скорости движения по оси X создадим переменную speedX. Значение этой переменной, как и speedY, будет изменяться в методе move в зависимости от нажатых клавиш. Также не забудь об изменении самих координат(x и y).


Требования:
1. В классе Rocket должно существовать приватное поле speedX типа double, проинициализированное при объявлении значением 0.
2. В классе Rocket должен существовать публичный метод void move(boolean isUpPressed, boolean isLeftPressed, boolean isRightPressed).
3. В классе Rocket не должен существовать публичный метод void move().
4. В методе move(boolean, boolean, boolean) значение поля speedY должно уменьшаться на значение boost, если параметр метода isUpPressed равен true.
5. В методе move(boolean, boolean, boolean) значение поля speedY должно увеличиваться на значение boost, если параметр метода isUpPressed равен false.
6. В методе move(boolean, boolean, boolean) значение поля y должно быть увеличено на значение speedY после того, как поле speedY было изменено.
7. В методе move(boolean, boolean, boolean) значение поля speedX должно уменьшаться на значение boost, если параметр метода isLeftPressed равен true.
8. В методе move(boolean, boolean, boolean) значение поля speedX должно увеличиваться на значение boost, если параметр метода isRightPressed равен true.
9. В методе move(boolean, boolean, boolean) значение поля x должно быть увеличено на значение speedX после того, как поле speedX было изменено.
10. В методе onTurn(int) класса MoonLanderGame у объекта rocket должен быть вызван метод move(boolean, boolean, boolean) с параметрами: isUpPressed, isLeftPressed, isRightPressed.



Игра Moon Lander (11/23)
На данный момент ракета может улетать за пределы игрового поля. Давай это исправим. Создадим специальный метод, в котором будем проверять достижение ракетой границ экрана: левой, правой и верхней. Если ракета достигает одну из указанных границ, возвращаем ее в пределы игрового поля. Этот метод нужно вызывать в методе move последним действием.
Достижение ракетой нижней границы экрана проверять не нужно, так как там находится ландшафт. Проверку на пересечение с ландшафтом мы сделаем позже.


Требования:
1. В классе Rocket должен существовать приватный метод void checkBorders().
2. В методе checkBorders(), если значение поля x меньше нуля, установи ему значение 0.
3. В методе checkBorders(), если значение поля x меньше нуля, установи полю speedX значение 0.
4. В методе checkBorders(), если сумма значений полей x и width больше ширины игрового поля MoonLanderGame.WIDTH, установи полю x значение (MoonLanderGame.WIDTH - width).
5. В методе checkBorders(), если сумма значений полей x и width больше ширины игрового поля MoonLanderGame.WIDTH, установи полю speedX значение 0.
6. В методе checkBorders(), если значение поля y меньше нуля, установи ему значение 0.
7. В методе checkBorders(), если значение поля y меньше нуля, установи полю speedY значение 0.
8. Метод move(boolean, boolean, boolean) должен вызывать метод checkBorders() последним действием.



Игра Moon Lander (12/23)
Как ты заметил, после отпускания клавиши движения влево или вправо ракета сразу прекращает движение,
а нужно чтобы она продолжала движение по инерции. Чтобы реализовать это, будем использовать переменную slowdown,
которая отвечает за замедление ракеты. Если мы отпускаем клавиши движения вправо или влево,
в методе move значение speedX ракеты будет плавно уменьшаться на значение slowdown, пока не достигнет 0.


Требования:
1. В классе Rocket должно существовать приватное поле slowdown типа double, проинициализированное при объявлении значением boost / 10.
2. В методе move(boolean, boolean, boolean) полю speedX должно устанавливаться значение 0, если параметр метода isLeftPressed равен false и параметр метода isRightPressed равен false и значение поля speedX находится в диапазоне от (-slowdown) до slowdown включительно.
3. В методе move(boolean, boolean, boolean) поле speedX должно уменьшаться на значение slowdown, если параметр метода isLeftPressed равен false, параметр метода isRightPressed равен false и значение поля speedX больше значения slowdown.
4. В методе move(boolean, boolean, boolean) поле speedX должно увеличиваться на значение slowdown, если параметр метода isLeftPressed равен false, параметр метода isRightPressed равен false и значение поля speedX меньше значения (-slowdown).
5. В методе move(boolean, boolean, boolean) поле x должно быть увеличено на значение speedX после того, как поле speedX было изменено, и до вызова метода checkBorders().



Игра Moon Lander (13/23)
Сейчас мы объявим несколько методов, которые пригодятся нам в будущем.

Метод check будет проверять пересечение координат ракеты и ландшафта.
Методы win и gameOver будут отвечать за выигрыш и проигрыш соответственно.
Метод isStopped будет проверять "мягкость" посадки. Если ракета слишком быстро приземляется на платформу(speedY достаточно большое), метод вернет false.


Требования:
1. В классе MoonLanderGame должен существовать приватный метод void check().
2. В классе MoonLanderGame должен существовать приватный метод void win().
3. В классе MoonLanderGame должен существовать приватный метод void gameOver().
4. Метод onTurn(int) должен вызывать метод check() после движения ракеты, и делать это до вызова метода drawScene().
5. В классе Rocket должен существовать публичный метод boolean isStopped().
6. Метод isStopped() должен возвращать значение true, если speedY меньше значения 10 * boost.
7. Метод isStopped() должен возвращать значение false, если speedY больше либо равен значению 10 * boost.



Игра Moon Lander (14/23)
Для удобства проверки приземления ракеты создадим платформу(GameObject platform). При инициализации в качестве матрицы передай ShapeMatrix.PLATFORM — ее мы добавили в класс ShapeMatrix. Теперь реализуем метод check. Он будет вызывать метод win или gameOver в зависимости от ситуации. Когда будешь писать код метода check, для проверки пересечений ракеты с другими объектами используй реализованный нами метод isCollision, который мы добавили в класс Rocket. Этот метод принимает в качестве параметра объект типа GameObject и возвращает true, если ракета пересекается с этим объектом.


Требования:
1. В классе MoonLanderGame должно существовать приватное поле platform типа GameObject.
2. Поле platform должно быть проинициализировано в методе createGameObjects() новым объектом типа GameObject с параметрами: 23, MoonLanderGame.HEIGHT - 1, ShapeMatrix.PLATFORM.
3. Метод check() должен вызвать метод gameOver(), если ракета пересекается с ландшафтом (кроме случаев, когда ракета пересекается с ландшафтом и остановлена). Для проверки используй метод isCollision.
4. Метод check() должен вызвать метод win(), если ракета пересекается с платформой и остановлена. Для проверки используй метод isCollision.
5. В классе Rocket должен быть импорт всего содержимого пакета com.javarush.engine.cell.



Игра Moon Lander (15/23)
Создадим метод land, который будет отвечать за приземление ракеты. Так как приземлением считается пересечение ракеты и платформы, для корректного отображения нам нужно поднять ракету на одну позицию вверх, чтобы она не "наезжала" на платформу. Еще нам понадобится специальное поле, которое будет отвечать за остановку игры. В начале игры значение этого поля будет false. Когда нужно остановить игру, мы будем устанавливать ему значение true.

Теперь займемся реализацией метода win. Он должен вызвать метод land у ракеты, показать сообщение о выигрыше и остановить игру.


Требования:
1. В классе Rocket должен существовать публичный метод void land().
2. В методе land() значение поля y должно уменьшаться на единицу.
3. В классе MoonLanderGame должно существовать приватное поле isGameStopped типа boolean.
4. Поле isGameStopped должно быть проинициализировано значением false в методе createGame().
5. В методе win() у ракеты должен вызываться метод land().
6. В методе win() необходимо установить полю isGameStopped значение true.
7. В методе win() должен вызываться метод showMessageDialog(Color, String, Color, int).
8. В методе win() должен вызываться метод stopTurnTimer().



Игра Moon Lander (16/23)
Займемся методом, отвечающим за крушение ракеты при ее пересечении с ландшафтом. Этот метод будет менять внешнее отображение ракеты путем замены ее матрицы (матрицу ты найдешь в классе ShapeMatrix). Теперь реализуем метод gameOver.
Он должен вызвать метод crash у ракеты, показать сообщение о проигрыше и остановить игру. Кроме того, добавим перезапуск игры при нажатии клавиши SPACE.


Требования:
1. В классе Rocket должен существовать публичный метод void crash().
2. В методе crash() значение поля matrix должно быть заменено на матрицу ShapeMatrix.ROCKET_CRASH.
3. В методе gameOver() у ракеты должен вызываться метод crash().
4. В методе gameOver() необходимо установить полю isGameStopped значение true.
5. В методе gameOver() должен вызываться метод showMessageDialog(Color, String, Color, int).
6. В методе gameOver() должен вызываться метод stopTurnTimer().
7. Если параметр метода onKeyPress(Key) клавиша "SPACE" и выполнено условие isGameStopped == true (игра остановлена), этот метод должен вызывать createGame() и больше ничего не делать.



Игра Moon Lander (17/23)
Пришла пора реализовать реактивную тягу ракеты. На этом этапе создадим класс RocketFire, который будет отвечать за отрисовку и анимирование огня выхлопа. Список матриц шагов анимаций будет храниться в его переменной frames типа List.

Переменная frameIndex будет хранить индекс текущей матрицы-анимации, а переменная isVisible будет отвечать за видимость огня.


Требования:
1. Должен существовать публичный класс RocketFire.
2. Класс RocketFire должен быть наследником класса GameObject.
3. В классе RocketFire должно существовать приватное поле frames типа List<int[][]>.
4. В классе RocketFire должно существовать приватное поле frameIndex типа int.
5. В классе RocketFire должно существовать приватное поле isVisible типа boolean.
6. В классе RocketFire должен существовать один публичный конструктор с одним параметром типа List<int[][]>.
7. Конструктор класса RocketFire должен вызывать конструктор базового класса с параметрами 0, 0 и frameList.get(0), где frameList – параметр конструктора. Необходимо использовать ключевое слово "super".
8. Конструктор класса RocketFire должен инициализировать поле frames значением frameList.
9. Конструктор класса RocketFire должен инициализировать поле frameIndex значением 0.
10. Конструктор класса RocketFire должен инициализировать поле isVisible значением false.



Игра Moon Lander (18/23)
Продолжаем реализацию реактивной тяги. На этом этапе в класс Rocket мы добавим переменные, которые описывают правую, левую и нижнюю тяги. Заполним эти поля в конструкторе соответствующими матрицами из класса ShapeMatrix, которые мы подготовили заранее.


Требования:
1. В классе Rocket должно существовать приватное поле downFire типа RocketFire.
2. В классе Rocket должно существовать приватное поле leftFire типа RocketFire.
3. В классе Rocket должно существовать приватное поле rightFire типа RocketFire.
4. В конструкторе класса Rocket поле downFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_DOWN_1, ShapeMatrix.FIRE_DOWN_2, ShapeMatrix.FIRE_DOWN_3 в указанном порядке.
5. В конструкторе класса Rocket поле leftFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_SIDE_1, ShapeMatrix.FIRE_SIDE_2.
6. В конструкторе класса Rocket поле rightFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_SIDE_1, ShapeMatrix.FIRE_SIDE_2.


Игра Moon Lander (19/23)
На этом этапе мы будем дорабатывать отображение анимации реактивной тяги. Добавим и реализуем метод nextFrame(), который
будет переключать кадры для создания анимации (устанавливать текущую матрицу из frames в переменную matrix).
Также переопределим метод draw, который будет менять кадр для анимации (вызвав метод nextFrame) и вызывать метод
суперкласса для отрисовки в том случае, если isVisible == true.


Требования:
1.	В классе RocketFire должен существовать приватный метод void nextFrame().
2.	В методе nextFrame() значение поля frameIndex должно увеличиваться на единицу.
3.	В методе nextFrame() значение поля frameIndex должно устанавливаться равным нулю, если значение поля frameIndex больше либо равно размеру списка frames.
4.	В методе nextFrame() значение поля matrix должно устанавливаться равным frames.get(frameIndex).
5.	В классе RocketFire должен быть переопределен метод draw(Game) родительского класса GameObject.
6.	Метод draw(Game) не должен ничего делать, если огонь не видно (isVisible == false).
7.	Метод draw(Game) должен вызывать метод nextFrame().
8.	Метод draw(Game) должен вызывать метод базового класса (super.draw(Game)) после вызова метода nextFrame().
9.	В классе RocketFire должен быть импорт всего содержимого пакета com.javarush.engine.cell.




Игра Moon Lander (20/23)
На данном этапе мы отрисуем нашу первую анимацию. Нам понадобятся методы show и hide, которые будут отвечать
за отображение и скрытие реактивной тяги, а также метод switchFire который будет задавать координаты тяги и вызывать
методы show и hide в зависимости от переданного параметра. Чтобы реактивная тяга отображалась внизу по центру
ракеты, нужно установить для нее координаты x и y определенным образом:
- в поле x огня мы устанавливаем значение x (позиция левой границы) ракеты + ширина ракеты, поделенная на 2. Таким образом
x тяги окажется посредине ракеты;
- в поле y огня мы устанавливаем значение y (позиция верхней границы) ракеты + высота ракеты. Таким образом y тяги окажется
внизу ракеты;
Не забудь вызвать метод switchFire в методе move — это позволит переключать анимацию при каждом ходе игры.
Кроме того, нам нужно переопределить метод draw ракеты, чтобы иметь возможность рисовать тягу вместе с ракетой.


Требования:
1.	В классе RocketFire должен существовать публичный метод void show().
2.	В методе show() полю isVisible должно устанавливаться значение true.
3.	В классе RocketFire должен существовать публичный метод void hide().
4.	В методе hide() полю isVisible должно устанавливаться значение false.
5.	В классе Rocket должен существовать приватный метод void switchFire(boolean isUpPressed).
6.	В методе switchFire(boolean) необходимо установить объекту downFire значение поля x, равное x ракеты + (width / 2) ракеты, если значение параметра метода true.
7.	В методе switchFire(boolean) необходимо установить объекту downFire значение поля y, равное y ракеты + height ракеты, если значение параметра метода true.
8.	В методе switchFire(boolean) необходимо вызвать у объекта downFire метод show(), если значение параметра метода true.
9.	В методе switchFire(boolean) необходимо вызвать у объекта downFire метод hide(), если значение параметра метода false.
10.	В методе move(boolean, boolean, boolean) класса Rocket последним необходимо вызвать метод switchFire(boolean) с параметром isUpPressed.
11.	В классе Rocket должен быть переопределен метод draw(Game) родительского класса GameObject.
12.	В методе draw(Game) класса Rocket необходимо вызвать метод базового класса, используя ключевое слово &quot;super&quot;.
13.	В методе draw(Game) класса Rocket необходимо вызвать метод draw(Game) у объекта downFire.



Игра Moon Lander (21/23)
Чтобы полностью реализовать анимацию, необходимо в методе switchFire учесть наличие боковых огней.
Поэтому в параметры существующего метода switchFire добавим переменные, отвечающие за нажатие клавиш движения в стороны, т.е. первым параметром метода будет isUpPressed, вторым — isLeftPressed, третьим — isRightPressed.
Также по аналогии с обработкой параметра isUpPressed добавим обработку isLeftPressed и isRightPressed.

Обрати внимание, что координата x у разных огней разная, а координата y — одинаковая. Не забудь исправить вызов метода switchFire.


Требования:
1. В классе Rocket должен существовать приватный метод void switchFire(boolean isUpPressed, boolean isLeftPressed, boolean isRightPressed).
2. В классе Rocket не должен существовать приватный метод void switchFire(boolean).
3. В методе switchFire(boolean, boolean, boolean) необходимо установить объекту leftFire значение поля x, равное x ракеты + width ракеты, если значение параметра isLeftPressed метода равно true.
4. В методе switchFire(boolean, boolean, boolean) необходимо установить объекту leftFire значение поля y, равное y ракеты + height ракеты, если значение параметра isLeftPressed метода равно true.
5. В методе switchFire(boolean, boolean, boolean) необходимо вызвать у объекта leftFire метод show(), если значение параметра isLeftPressed метода равное true.
6. В методе switchFire(boolean, boolean, boolean) необходимо вызвать у объекта leftFire метод hide(), если значение параметра isLeftPressed метода равное false.
7. В методе switchFire(boolean, boolean, boolean) необходимо установить объекту rightFire значение поля x, равное x ракеты - ShapeMatrix.FIRE_SIDE_1[0].length, если значение параметра isRightPressed метода равное true.
8. В методе switchFire(boolean, boolean, boolean) необходимо установить объекту rightFire значение поля y, равное y ракеты + height ракеты, если значение параметра isRightPressed метода равное true.
9. В методе switchFire(boolean, boolean, boolean) необходимо вызвать у объекта rightFire метод show(), если значение параметра isRightPressed метода равное true.
10. В методе switchFire(boolean, boolean, boolean) необходимо вызвать у объекта rightFire метод hide(), если значение параметра isRightPressed метода равное false.
11. В методе draw(Game) класса Rocket необходимо вызвать метод draw(Game) у объекта leftFire.
12. В методе draw(Game) класса Rocket необходимо вызвать метод draw(Game) у объекта rightFire.
13. В методе move(boolean, boolean, boolean) класса Rocket необходимо заменить вызов метода switchFire(boolean) с параметром isUpPressed на вызов метода switchFire(boolean, boolean, boolean) с параметрами isUpPressed, isLeftPressed и isRightPressed.





