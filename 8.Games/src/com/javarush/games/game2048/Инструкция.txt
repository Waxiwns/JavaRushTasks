Игра 2048 (1/18)

Привет! Сегодня начнем писать одну интересную и "залипательную" игру — 2048. Готов? Тогда поехали.
Правила игры:
Игровое поле имеет форму квадрата. Размер стандартного поля — 4x4 плитки. Цель игры — получить плитку номиналом 2048.
1.  В каждом раунде появляется плитка номиналом 2 (с вероятностью 90%) или 4 (с вероятностью 10%).
2.  Можно сдвинуть все плитки игрового поля в одну из 4 сторон, нажав соответствующую клавишу: вверх, вниз,
вправо или влево. Если при сдвиге две плитки одного номинала "налетают" друг на друга, они "слипаются" в одну.
Ее номинал равен сумме соединившихся плиток. После каждого хода на свободной секции поля появляется новая плитка
номиналом 2 или 4. Если при нажатии клавиши местоположение плиток или их номинал не изменится, ход не совершается.
3.  Если в одной строчке или столбце находится более двух плиток одного номинала, при сбрасывании они слипаются
с той стороны, в которую были направлены. Например, находящиеся в одной строке плитки (4, 4, 4, 0) после
хода влево превратятся в (8, 4, 0, 0), а после хода вправо — в (0, 0, 4, 8). Данная обработка неоднозначности
позволяет более точно формировать стратегию игры.
4.  За каждое соединение игровые очки увеличиваются на номинал получившейся плитки.
5.  Игра заканчивается поражением, если после очередного хода невозможно совершить действие.
6.  Игра заканчивается победой, если на поле появится клетка номиналом 2048.

Теперь приступаем к реализации игры:
Для начала нам понадобится класс, в котором будет реализована логика игры. Давай назовем его Game2048.
Мы подготовили "игровой движок", где происходит запуск самой игры, перерисовка ее элементов и т.д.
Поэтому твой класс Game2048 должен наследоваться от класса Game. Этот и другие классы движка находятся
в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс Game2048 должен содержать такой импорт:
import com.javarush.engine.cell.*;
Попробуй запустить на выполнение свой класс Game2048 и посмотри, что получилось.


Требования:
1.	Должен быть создан класс Game2048.
2.	Класс Game2048 должен быть публичным.
3.	Класс Game2048 должен быть наследником класса Game.
4.	В классе Game2048 должен быть импорт всего содержимого пакета com.javarush.engine.cell.


Игра 2048 (2/18)

Пробовал запускать свою программу? Игровое поле маленькое. Давай это исправим. Для этого нужно
переопределить метод initialize() родительского класса Game. Метод initialize() служит для того, чтобы ты
сам мог задать размер игрового поля, решить, отображать сетку или нет и т.д.

Чтобы задать размер игрового поля в методе initialize(), вызови метод
setScreenSize(int width, int height) родительского класса Game, в который передай ширину и высоту
игрового поля. Как ты знаешь, размер игрового поля в нашей игре — 4х4 плитки. Предлагаем создать private
static final int переменную (константа) SIDE со значением 4 и передать ее как параметры в метод
setScreenSize(). Должно получиться что-то такое — setScreenSize(SIDE, SIDE). Можешь снова запустить свою
программу и посмотреть, что в итоге получилось.


Требования:
1.	В классе Game2048 должен быть переопределен метод initialize() родительского класса Game.
2.	В классе Game2048 должна быть создана переменная SIDE.
3.	Переменная SIDE должна быть private, static, final и иметь тип int.
4.	Переменная SIDE должна быть проинициализирована значением 4.
5.	В методе initialize() должен быть вызван метод setScreenSize(SIDE, SIDE).


Игра 2048 (3/18)

Игровой движок мы будем использовать для отображения текущего состояния игры. А для хранения состояния отлично подойдет массив 4x4.

Поэтому создай поле int[][] gameField и инициализируй его при объявлении целочисленным массивом int[][] размером SIDEхSIDE.
По умолчанию ячейки целочисленного массива инициализируются нулями. Пускай ноль обозначает пустую клетку игрового поля.


Требования:
1.	В классе Game2048 должна быть создана приватная матрица (двумерный целочисленный массив) gameField с типом int[][].
2.	Размер матрицы должен быть SIDEхSIDE.
3.	В классе Game2048 должен быть создан приватный метод void createGame().
4.	В методе initialize() должен быть вызван методе createGame().


Игра 2048 (4/18)

Черный экран как-то не очень смотрится, согласись. Давай это изменим.

В классе Game, а теперь и в классе Game2048, т.к. он унаследован от Game, есть специальный метод
setCellColor(int x, int y, Color color), который красит ячейку с координатами x, y в цвет color.
Список доступных цветов ты найдешь в enum Color игрового движка.

Например, чтобы раскрасить ячейку с координатами 0,2 в красный цвет, нужно вызвать метод:
setCellColor(0, 2, Color.RED).

Создай метод drawScene() и в нем раскрась все клетки игрового поля в понравившийся цвет.

Требования:
•	В классе Game2048 должен быть создан приватный метод void drawScene().
•	В методе drawScene() должен быть вызван метод setCellColor(int, int, Color) для каждой клетки.
•	В методе initialize() последним должен быть вызван метод drawScene().
•	Все плитки должны быть раскрашены в один цвет.


Игра 2048 (5/18)

Согласно правилам, при запуске игры значения двух случайных клеток должны быть 2 либо 4 с вероятностью 90% и 10% соответственно.

Для выполнения этого условия, создай метод createNewNumber() и вызови его в методе createGame() 2 раза.
Метод createNewNumber():
1) случайным образом выбирает ячейку матрицы gameField со значением 0. Для получения случайных координат x и y
два раза вызови метод getRandomNumber(int) с параметром SIDE;
2) случайным образом присваивает этой ячейке значение 2 (вероятность 90%) или 4 (вероятность 10%).
Для этого используй метод getRandomNumber(int) с параметром 10:
- если getRandomNumber(int) вернет число 9, ячейке должно быть присвоено значение 4;
- если getRandomNumber(int) вернет число от 0 до 8, ячейке должно быть присвоено значение 2.


Требования:
1.	В классе Game2048 должен быть создан приватный метод void createNewNumber().
2.	Метод createNewNumber() должен два раза вызывать getRandomNumber(SIDE) и один раз getRandomNumber(10).
3.	В методе createNewNumber() должно быть присвоено новое значение 2 или 4 (с вероятностью 90% и 10% соответственно) для случайной свободной ячейки матрицы gameField.
4.	В методе createGame() должен быть вызван метод createNewNumber() 2 раза.


Игра 2048 (6/18)

Уже намного лучше. Но, думаю, мы можем больше. Давай раскрасим клетки с одинаковыми значениями в одинаковые цвета.

Для этого напишем метод, который будет принимать в качестве параметров координаты клетки и ее значение, вычислять
на основе этого значения цвет клетки, устанавливать ей значение и цвет. Цвета клеток для разных чисел должны быть
разные, а для одинаковых — одинаковые. Числа, которые могут находиться в матрице gameField: 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048.

Нам на помощь придет специальный метод — setCellValueEx(int x, int y, Color cellColor, String value) класса Game.
Воспользуйся им, чтобы изменить цвет и значение клетки одновременно.

Значение 0 на игровом поле отображать не нужно: вместо него мы видим пустую клетку. Поэтому просто передай в метод setCellValueEx() пустую строку.
И последний штрих: в методе drawScene() замени вызов метода setCellColor() на setCellColoredNumber().

Примечания:
1. Для наглядности пустые клетки в примерах будут обозначены нулями.
2. Координаты матрицы должны соответствовать отображаемым координатам.

Пример:
Матрица: {
{2, 4, 8, 16},
{32, 64, 128, 256},
{512, 1024, 2048},
{2, 8, 4, 0}
}
Соответствующее отображение:
!!!Картинка!!!!
Чтобы это реализовать, при установке значения игровому полю используй инвертированные координаты матрицы.
Например, для установки значения клетке с координатами (х, у) используй значение матрицы gameField[y][x].

Чтобы лучше понять, о чем идет речь, запусти отрисовку этой матрицы, сначала используя gameField[y][x], а затем — gameField[х][у].


Требования:
1.	В классе Game2048 должен быть создан приватный метод Color getColorByValue(int value). Он должен возвращать цвет клетки по ее значению.
2.	В классе Game2048 должен быть создан приватный метод void setCellColoredNumber(int x, int y, int value).
3.	Метод setCellColoredNumber(int, int, int) должен вызывать метод getColorByValue(int).
4.	Метод setCellColoredNumber(int, int, int) должен вызывать метод setCellValueEx(int, int, Color, String).
5.	Метод setCellColoredNumber(int, int, int) должен изменять цвет плитки в зависимости от ее значения.
6.	Значение 0 не должно отображаться на игровом поле.
7.	В методе drawScene() должен быть заменен вызов метода setCellColor(int, int, Color) на setCellColoredNumber(int, int, int), чтобы значения и цвета плиток игрового поля на экране соответствовали значениям в матрице gameField.


Игра 2048 (7/18)

Исходя из правил игры, мы можем сдвинуть все плитки в одну из 4 сторон: вверх, вниз, вправо, влево.
При этом плитки со значением 2 и больше уходят в одну сторону (сторону сдвига), а пустые — в противоположную.

На данном этапе реализуем сдвиг влево. Для этого нам понадобится приватный метод boolean compressRow(int[] row), который сдвигает все
ненулевые элементы массива row влево (в сторону нулевого индекса), а нулевые элементы переносит вправо.
Если хотя бы один элемент был передвинут, метод возвращает true, иначе – false.

Примеры:
- Было (0, 2, 0, 2), стало (2, 2, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (2, 2, 2, 2). Метод вернул false.
- Было (0, 4, 0, 2), стало (4, 2, 0, 0). Метод вернул true.
- Было (4, 2, 0, 2), стало (4, 2, 2, 0). Метод вернул true.
- Было (2, 4, 0, 0), стало (2, 4, 0, 0). Метод вернул false.


Требования:
1.	В классе Game2048 должен быть создан приватный метод boolean compressRow(int[] row).
2.	Метод compressRow(int[]) должен быть реализован в соответствии с условием задачи.
3.	Метод compressRow(int[]) должен возвращать true, если он внес изменения во входящий массив и false, если изменений не было.


Игра 2048 (8/18)

Ты уже умеешь передвигать плитки по полю. Но это не все, что ты можешь делать в данной игре :)
Если при сдвиге две плитки с одинаковым значением "налетают" друг на друга, они соединяются в одну,
а ее значение равно сумме соединившихся плиток. Давай реализуем это.

Условия задачи:
Создай приватный метод boolean mergeRow(int[] row), который соединяет соседние пары одинаковых ненулевых элементов
массива row. Соединение должно происходить при сдвиге влево.

Если подряд стоят более двух одинаковых ненулевых элементов, соединяются сначала самые левые.
Соединенные элементы повторно не соединяются (в рамках текущего хода).

Метод должен возвращать true, если хотя бы один элемент массива был в нем изменен, иначе — false.

Примеры:
- Было (4, 4, 0, 0), стало (8, 0, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (4, 0, 4, 0). Метод вернул true.
- Было (4, 2, 2, 0), стало (4, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 0), стало (0, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 2), стало (0, 4, 0, 2). Метод вернул true.
- Было (4, 0, 4, 0), стало (4, 0, 4, 0). Метод вернул false.


Требования:
1.	В классе Game2048 должен быть создан приватный метод boolean mergeRow(int[] row).
2.	Метод mergeRow(int[]) должен быть реализован в соответствии с условием задачи.
3.	Метод mergeRow(int[]) должен возвращать true, если им были внесены изменения во входящий массив и false, если изменений не было.


Игра 2048 (9/18)

Играть в игру можно используя клавиатуру, а именно — клавиши вверх, вниз, вправо, влево. По нажатию
определенной клавиши должно происходить соответствующее действие (сдвиг, слияние). Чтобы задать действие, необходимо
переопределить метод onKeyPress(Key key) класса Game, где параметром является нажатая клавиша клавиатуры.
В этом методе нужно сравнить полученный параметр key с четырьмя значениями направлений из enum Key и выполнить
соответствующее действие.

Например:
if (key == Key.LEFT) {
// выполнить движение влево
} else if (key == Key.RIGHT) {
// выполнить движение вправо
} и т.д.

Сами действия предлагаем вынести в соответствующие методы.
Например, движение влево — в метод moveLeft() и т.д. В итоге должно получиться 4 метода на 4 действия.


Требования:
1.	В классе Game2048 должен быть переопределен метод onKeyPress(Key key).
2.	В классе Game2048 должен быть создан приватный метод void moveLeft().
3.	В классе Game2048 должен быть создан приватный метод void moveRight().
4.	В классе Game2048 должен быть создан приватный метод void moveUp().
5.	В классе Game2048 должен быть создан приватный метод void moveDown().
6.	В методе onKeyPress(Key) должен быть вызван метод moveLeft() при нажатии клавиши влево.
7.	В методе onKeyPress(Key) должен быть вызван метод moveRight() при нажатии клавиши вправо.
8.	В методе onKeyPress(Key) должен быть вызван метод moveUp() при нажатии клавиши вверх.
9.	В методе onKeyPress(Key) должен быть вызван метод moveDown() при нажатии клавиши вниз.


Игра 2048 (10/18)

Какие методы вызывать по нажатию клавиш мы уже знаем. Поэтому приступим к их
реализации. Начнем с метода moveLeft().

В методе moveLeft() мы сдвигаем элементы каждой строки матрицы gameField
методом compressRow(int[]), после соединяем их значения с помощью метода mergeRow(int[]), а затем снова сдвигаем (так как после соединения могут
образоваться пустые промежутки).
В эти методы в качестве параметра должна поочередно передаваться каждая строка матрицы gameField.
Пример:
Начальная строка:         {2, 2, 0, 2}
После compressRow(int[]): {2, 2, 2, 0}
После mergeRow(int[]):    {4, 0, 2, 0}
После compressRow(int[]): {4, 2, 0, 0}

Если был хотя бы один сдвиг или соединение элементов, ход считается
совершенным, и мы добавляем в массив новое число — вызываем метод createNewNumber().

Чтобы это было видно на экране, в конце нужно вызвать наш метод рисования drawScene().


Требования:
1.	Метод moveLeft() должен перемещать и соединять элементы матрицы gameField влево в соответствии с правилами игры.
2.	Метод moveLeft() должен вызывать метод compressRow(int[]) как минимум по одному разу для каждой строки матрицы gameField.
3.	Метод moveLeft() должен вызывать метод mergeRow(int[]) ровно по одному разу для каждой строки матрицы gameField.
4.	Метод moveLeft() должен добавлять плитку с помощью метода createNewNumber(), если перемещение или соединение произошло.
5.	Метод moveLeft() не должен изменять содержимое матрицы gameField, если ни перемещение, ни соединение влево невозможны.
6.	Метод onKeyPress(Key) должен вызывать метод drawScene(), если была нажата клавиша движения (Key.UP, Key.RIGHT, Key.LEFT, Key.DOWN).


Игра 2048 (11/18)

Метод moveLeft() реализован, но есть еще 3. Предлагаем их реализовать таким способом: если нужно сдвинуть плитки
вниз, берем нашу матрицу gameField, поворачиваем ее на 90 градусов по часовой стрелке (низ становится слева),
сдвигаем влево и разворачиваем матрицу обратно (еще 3 раза поворачиваем матрицу на 90 градусов по часовой
стрелке). Остальные методы — аналогично.

Начнем с поворота матрицы gameField. Вот как примерно это должно выглядеть:
(2, 2, 2, 2),    (0, 8, 4, 2),
(4, 4, 4, 4),  (0, 8, 4, 2),
(8, 8, 8, 8),    (0, 8, 4, 2),
(0, 0, 0, 0),    (0, 8, 4, 2)


Требования:
1.	В классе Game2048 должен быть создан приватный метод void rotateClockwise().
2.	Метод rotateClockwise() должен поворачивать матрицу gameField по часовой стрелке на 90 градусов. См. пример.


Игра 2048 (12/18)

Теперь можно приступать к реализации методов moveRight(), moveUp(), moveDown().

В методе moveRight() повернем матрицу gameFiled два раза по часовой стрелке, затем вызовем moveLeft(),
который уже написан, и снова повернем gameField еще два раза по часовой стрелке. Должно сработать.

В методе moveDown() поворачиваем на 90 градусов один раз, затем вызываем moveLeft() и еще 3 раза поворачиваем на 90 градусов.

В методе moveUp() сначала поворачиваем на 90 градусов три раза, затем вызываем moveLeft() и еще один раз
поворачиваем на 90 градусов.


Требования:
1.	Метод moveRight() должен перемещать элементы матрицы gameField вправо в соответствии с правилами.
2.	Метод moveRight() не должен изменять матрицу gameField, если перемещение вправо невозможно.
3.	Метод moveUp() должен перемещать элементы матрицы gameField вверх в соответствии с правилами.
4.	Метод moveUp() не должен изменять матрицу gameField, если перемещение вверх невозможно.
5.	Метод moveDown() должен перемещать элементы матрицы gameField вниз в соответствии с правилами.
6.	Метод moveDown() не должен изменять матрицу gameField, если перемещение вниз невозможно.


Игра 2048 (13/18)

Основная логика игры реализована, но не до конца. Исходя из правил и названия игры, она заканчивается
выигрышем, когда значение одной из плиток будет равно 2048.

Поиск максимального значения на игровом поле нужно вынести в отдельный метод int getMaxTileValue(), который будет
возвращать его. Проверку выигрыша можно делать где угодно. Например, в самом начале
метода createNewNumber(), перед добавлением нового значения в матрицу.

Когда найдена плитка со значением 2048, нужно сообщить игроку о выигрыше. Чтобы сделать это красиво, вызови
метод showMessageDialog(Color cellColor, String message, Color textColor, int textSize) класса Game.
Думаю, не нужно объяснять, что передавать в этот метод: названия параметров говорят сами за себя.

После победы текущая игра прекращается. В будущем нам пригодится некий флаг isGameStopped.
Если игра выиграна, он будет равен true.
Давай все вышеописанное (вывод сообщения о выигрыше, флаг остановки игры) вынесем в отдельный метод, который назовем win().


Требования:
1.	В классе Game2048 должен быть создан приватный метод int getMaxTileValue(). Метод должен возвращать максимальное значение в матрице gameField.
2.	В классе Game2048 должна быть создана приватная переменная boolean isGameStopped, инициализированная при объявлении значением false.
3.	В классе Game2048 должен быть создан приватный метод void win().
4.	В методе win() переменной isGameStopped должно быть присвоено значение true.
5.	В методе win() должен быть вызван метод showMessageDialog(Color, String, Color, int).
6.	В методе createNewNumber() должен быть вызван метод getMaxTileValue().
7.	В методе createNewNumber() должен быть вызван метод win(), если в матрице есть значение 2048.


Игра 2048 (14/18)

Отлично! В прошлой части мы выяснили условия, при которых игра выиграна и реализовали их.
Но есть и обратная сторона медали — проигрыш. Если на игровом поле нет плитки со
значением 2048 и нет возможности сделать ход, игроку засчитывается поражение.

Ход можно сделать, если есть хотя бы одна пустая плитка или пустых плиток нет, но есть возможность их соединения.

Вынеси эти проверки в метод canUserMove().


Требования:
1.	В классе Game2048 должен быть создан приватный метод boolean canUserMove().
2.	canUserMove() должен возвращать true, если количество нулевых элементов матрицы gameField больше нуля.
3.	canUserMove() должен возвращать true, если нулевых элементов нет, но в матрице gameField есть хотя бы две соседние клетки с одинаковым значением (по горизонтали или вертикали).
4.	canUserMove() должен возвращать false, если пустых плиток нет, и нет возможности соединения клеток.


Игра 2048 (15/18)

Как и о выигрыше, о проигрыше нужно сообщить. Давай это сделаем в отдельном методе void gameOver(),
по аналогии с методом win(). Если игра проиграна, флагу isGameStopped также нужно установить значение true.

В начале метода onKeyPress(Key) выполни проверку, возможен ли ход. Если ход невозможен, вызови метод gameOver() и больше ничего не делай.


Требования:
1.	В классе Game2048 должен быть создан приватный метод void gameOver().
2.	В методе gameOver() переменной isGameStopped должно быть присвоено значение true.
3.	В методе gameOver() должен быть вызван метод showMessageDialog(Color, String, Color, int).
4.	Метод onKeyPress(Key) должен вызвать метод gameOver() и больше ничего не делать, если метод canUserMove() вернет false.


Игра 2048 (16/18)

Пришло время узнать, для чего нам нужен флаг isGameStopped. Он необходим для реализации механизма рестарта игры.
Если значение этого флага true — игра остановлена из-за выигрыша или проигрыша. При нажатии клавиши Key.SPACE можно делать рестарт игры.
Рестарт выполняется так же, как и старт новой игры — вызовом метода createGame(), который создает новое игровое поле.

Примечание:
Проверку возможности рестарта игры лучше проводить перед проверкой возможности хода.


Требования:
1.	Если игра остановлена, по нажатию клавиши Key.SPACE полю isGameStopped должно присваиваться значение false.
2.	Если игра остановлена, по нажатию клавиши Key.SPACE должен быть вызван метод createGame().
3.	В методе createGame() матрица gameField должна создаваться заново.
4.	Если игра остановлена, по нажатию клавиши Key.SPACE нужно отобразить на экране новое состояние &ndash; вызвать метод drawScene().
5.	Если игра остановлена, нажатие любых других клавиш, кроме Key.SPACE, должно игнорироваться.


Игра 2048 (17/18)

Думаю, ты давно заметил строку внизу игрового поля Score: 0. Судя по названию, это подсчет очков :)
Согласно правилам игры, за каждое соединение плиток игровые очки увеличиваются на значение получившейся плитки.
Для реализации этой задачи заведем переменную private int score в классе Game2048.
Ее значение будем увеличивать в методе соединения плиток mergeRow(int[]), если такое соединение произошло.
Чтобы получившееся значение score выводилось на экран, нужно вызвать метод setScore(int score) класса Game2048
и передать этому методу нашу переменную score. Не забудь обнулить очки после рестарта игры.


Требования:
1.	В классе Game2048 должна быть создана приватная переменная score с типом int.
2.	Значение переменной score должно увеличиваться на сумму значений соединенных плиток, если такое соединение произошло.
3.	Если соединение плиток произошло, в методе mergeRow(int[]) должен быть вызван метод setScore(int) класса Game2048 столько раз, сколько произошло соединений.
4.	На экран должен выводиться валидный счет.
5.	Счет должен обнуляться после рестарта игры.


Игра 2048 (18/18)

Наши поздравления: игра написана! Предлагаем запустить ее и посмотреть, что получилось.

Если есть время и вдохновение, можешь улучшить игру, добавив некоторые "фичи" от себя.

Например:

- сделать возможным выбор размера игрового поля перед началом игры;
- изменить размер игрового поля;
- продолжать игру, даже если найдена плитка со значением 2048;
- вместо чисел 2, 4 (степени двойки) использовать числа Фибоначчи;
- добавить "суперплитку" с возможностью слияния с любой из существующих на игровом поле;
- добавить визуальные эффекты (анимацию).

Готовую игру ты можешь опубликовать на JavaRush. Но перед этим нужно отправить свое решение на проверку, чтобы была доступна кнопка публикации. Игра будет доступна в разделе "Игры" всем пользователям.

А еще ты можешь поделиться ею с друзьями в соцсетях. Будет здорово, если они сыграют в твою версию "2048", не так ли?

После публикации, в комментариях напиши краткую инструкцию (какие действия доступны, какие клавиши или кнопки нужно использовать для игры), а также особенности твоей реализации.


Требования:
1. Запусти игру.

